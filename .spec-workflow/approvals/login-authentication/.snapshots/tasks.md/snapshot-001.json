{
  "id": "snapshot_1758786710005_31p6o43d1",
  "approvalId": "approval_1758786709906_b2nn030d6",
  "approvalTitle": "登入頁面功能任務分解文件",
  "version": 1,
  "timestamp": "2025-09-25T07:51:50.004Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Tasks Document\r\n\r\n## 後端實作任務\r\n\r\n- [ ] 1. 建立認證相關資料模型和介面\r\n  - File: MOTPDualAuthWebsite.API/Models/AuthModels.cs, MOTPDualAuthWebsite.API/Services/IAuthService.cs\r\n  - 建立 LoginRequest, LoginResponse, AuthResult, SessionInfo 等資料模型\r\n  - 定義 IAuthService 介面契約\r\n  - Purpose: 建立認證系統的資料結構和服務介面\r\n  - _Leverage: 現有的 User.cs, OTPCode.cs 模型結構_\r\n  - _Requirements: Requirement 1, Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend .NET Developer specializing in data modeling and service contracts | Task: Create comprehensive authentication data models (LoginRequest, LoginResponse, AuthResult, SessionInfo) and IAuthService interface following requirements 1 and 5, extending existing User and OTPCode model patterns | Restrictions: Use .NET 8 features, follow existing model validation patterns, ensure proper data annotations, maintain consistent naming conventions with existing codebase | _Leverage: MOTPDualAuthWebsite.API/Models/User.cs, MOTPDualAuthWebsite.API/Models/OTPCode.cs | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 5 (安全會話管理) | Success: All models compile without errors, IAuthService interface defines all required methods, data annotations provide proper validation, models integrate seamlessly with existing codebase_\r\n\r\n- [ ] 2. 實作認證服務 AuthService\r\n  - File: MOTPDualAuthWebsite.API/Services/AuthService.cs\r\n  - 實作帳號密碼驗證、TOTP 整合、JWT Token 管理\r\n  - 整合現有的 UserRepository 和 OTPService\r\n  - Purpose: 提供完整的認證商業邏輯\r\n  - _Leverage: 現有的 UserRepository, OTPService, EncryptionService_\r\n  - _Requirements: Requirement 1, Requirement 2, Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Backend .NET Developer with expertise in authentication systems and business logic | Task: Implement AuthService class with password authentication, TOTP integration, and JWT token management following requirements 1, 2, and 5, leveraging existing UserRepository, OTPService, and EncryptionService | Restrictions: Use bcrypt for password hashing, implement account lockout logic, ensure secure JWT token generation, follow existing service patterns, add comprehensive logging | _Leverage: MOTPDualAuthWebsite.API/Repositories/UserRepository.cs, MOTPDualAuthWebsite.API/Services/OTPService.cs, MOTPDualAuthWebsite.API/Services/EncryptionService.cs | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 2 (TOTP 雙因子驗證), Requirement 5 (安全會話管理) | Success: AuthService implements all IAuthService methods correctly, password verification works with existing User model, TOTP integration reuses existing OTPService, JWT tokens are secure and properly configured, account lockout prevents brute force attacks_\r\n\r\n- [ ] 3. 建立認證控制器 AuthController\r\n  - File: MOTPDualAuthWebsite.API/Controllers/AuthController.cs\r\n  - 實作 /api/auth/login, /api/auth/verify-totp, /api/auth/logout, /api/auth/profile 端點\r\n  - 添加請求驗證和錯誤處理\r\n  - Purpose: 提供認證相關的 HTTP API 端點\r\n  - _Leverage: 現有的 OTPController 結構和錯誤處理模式_\r\n  - _Requirements: Requirement 1, Requirement 2, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: API Developer specializing in ASP.NET Core controllers and HTTP endpoints | Task: Create AuthController with login, TOTP verification, logout, and profile endpoints following requirements 1, 2, and 4, using existing OTPController patterns for structure and error handling | Restrictions: Use proper HTTP status codes, implement model validation, add comprehensive API documentation, ensure consistent response formats, follow existing controller patterns | _Leverage: MOTPDualAuthWebsite.API/Controllers/OTPController.cs | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 2 (TOTP 雙因子驗證), Requirement 4 (使用者體驗優化) | Success: All API endpoints work correctly, proper HTTP status codes returned, request validation prevents invalid data, error responses are user-friendly, API documentation is complete and accurate_\r\n\r\n- [ ] 4. 配置 JWT 認證中介軟體\r\n  - File: MOTPDualAuthWebsite.API/Program.cs, MOTPDualAuthWebsite.API/appsettings.json\r\n  - 添加 JWT 認證配置和中介軟體\r\n  - 設定 JWT 金鑰、過期時間、簽章演算法\r\n  - Purpose: 啟用 JWT Token 驗證機制\r\n  - _Leverage: 現有的 Program.cs 服務註冊模式_\r\n  - _Requirements: Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: DevOps Engineer with expertise in ASP.NET Core configuration and JWT authentication | Task: Configure JWT authentication middleware and settings following requirement 5, extending existing Program.cs service registration patterns and appsettings configuration | Restrictions: Use secure JWT configuration, set appropriate token expiration times, configure proper signing keys, ensure HTTPS-only cookies, follow existing configuration patterns | _Leverage: MOTPDualAuthWebsite.API/Program.cs, MOTPDualAuthWebsite.API/appsettings.json | _Requirements: Requirement 5 (安全會話管理) | Success: JWT authentication is properly configured, tokens are secure and properly validated, middleware is correctly ordered in pipeline, configuration supports both development and production environments_\r\n\r\n- [ ] 5. 更新資料庫結構支援會話管理\r\n  - File: MOTPDualAuthWebsite.API/Models/Session.cs, MOTPDualAuthWebsite.API/Data/ApplicationDbContext.cs\r\n  - 建立 Session 模型和資料表\r\n  - 添加使用者會話追蹤功能\r\n  - Purpose: 支援會話管理和安全稽核\r\n  - _Leverage: 現有的 ApplicationDbContext 和模型結構_\r\n  - _Requirements: Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Database Developer with expertise in Entity Framework Core and data modeling | Task: Create Session model and update ApplicationDbContext to support session management following requirement 5, using existing context and model patterns | Restrictions: Use proper foreign key relationships, add appropriate indexes for performance, ensure data consistency, follow existing model conventions, create proper migration | _Leverage: MOTPDualAuthWebsite.API/Data/ApplicationDbContext.cs, MOTPDualAuthWebsite.API/Models/User.cs | _Requirements: Requirement 5 (安全會話管理) | Success: Session model is properly defined with relationships, DbContext includes Session DbSet, migration is created and tested, session tracking works correctly with User model_\r\n\r\n## 前端實作任務\r\n\r\n- [ ] 6. 建立認證相關型別定義\r\n  - File: ngx-app/src/app/shared/types/auth.ts\r\n  - 定義 LoginRequest, LoginResponse, AuthUser, SessionState 等介面\r\n  - 擴展現有的型別定義結構\r\n  - Purpose: 提供前端認證功能的型別安全\r\n  - _Leverage: 現有的 ngx-app/src/app/shared/types/otp.ts 結構_\r\n  - _Requirements: Requirement 1, Requirement 2, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Frontend TypeScript Developer specializing in type systems and interfaces | Task: Create comprehensive authentication type definitions (LoginRequest, LoginResponse, AuthUser, SessionState) following requirements 1, 2, and 4, extending existing OTP type patterns | Restrictions: Ensure strong typing, maintain consistency with backend models, follow existing naming conventions, provide proper JSDoc comments | _Leverage: ngx-app/src/app/shared/types/otp.ts | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 2 (TOTP 雙因子驗證), Requirement 4 (使用者體驗優化) | Success: All interfaces are properly typed, consistent with backend models, provide full type coverage for authentication features, integrate well with existing type system_\r\n\r\n- [ ] 7. 實作認證服務 AuthService\r\n  - File: ngx-app/src/app/shared/services/auth.service.ts\r\n  - 建立登入、TOTP 驗證、登出、使用者狀態管理功能\r\n  - 整合現有的 HTTP 客戶端和錯誤處理\r\n  - Purpose: 提供前端認證相關的 API 互動和狀態管理\r\n  - _Leverage: 現有的 ngx-app/src/app/shared/services/otp.service.ts 模式_\r\n  - _Requirements: Requirement 1, Requirement 2, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Angular Developer with expertise in services and HTTP client integration | Task: Implement AuthService with login, TOTP verification, logout, and user state management following requirements 1, 2, and 4, using existing OtpService patterns for HTTP requests and error handling | Restrictions: Use Angular signals for state management, implement proper error handling, ensure type safety, follow existing service patterns, add loading states | _Leverage: ngx-app/src/app/shared/services/otp.service.ts | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 2 (TOTP 雙因子驗證), Requirement 4 (使用者體驗優化) | Success: AuthService provides all required authentication methods, uses Angular signals effectively, error handling is consistent with existing services, HTTP requests are properly typed and handled_\r\n\r\n- [ ] 8. 建立會話管理服務 SessionService\r\n  - File: ngx-app/src/app/shared/services/session.service.ts\r\n  - 實作 JWT Token 儲存、驗證、清除功能\r\n  - 提供認證狀態檢查和自動登出機制\r\n  - Purpose: 管理使用者會話狀態和安全性\r\n  - _Leverage: 瀏覽器 localStorage API 和 Angular 依賴注入_\r\n  - _Requirements: Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Frontend Security Developer with expertise in session management and JWT tokens | Task: Create SessionService for JWT token management, authentication state checking, and automatic logout following requirement 5, using browser localStorage and Angular dependency injection | Restrictions: Ensure secure token storage, implement token expiration checking, provide reactive authentication state, handle token refresh gracefully, follow Angular service patterns | _Leverage: Angular HttpClient, localStorage API | _Requirements: Requirement 5 (安全會話管理) | Success: SessionService securely manages JWT tokens, provides reactive authentication state, handles token expiration correctly, integrates well with AuthService and application routing_\r\n\r\n- [ ] 9. 建立登入頁面元件 LoginComponent\r\n  - File: ngx-app/src/app/features/auth/pages/login.component.ts\r\n  - 實作帳號密碼登入表單和驗證\r\n  - 整合 Angular Material 和響應式設計\r\n  - Purpose: 提供使用者登入介面\r\n  - _Leverage: 現有的 ngx-app/src/app/features/auth/pages/bind-device.component.ts 設計模式_\r\n  - _Requirements: Requirement 1, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Angular UI Developer with expertise in reactive forms and Material Design | Task: Create LoginComponent with email/password form, validation, and responsive design following requirements 1 and 4, using existing bind-device component patterns and Angular Material | Restrictions: Use reactive forms with proper validation, ensure accessibility compliance, implement loading and error states, follow existing component structure and styling | _Leverage: ngx-app/src/app/features/auth/pages/bind-device.component.ts | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 4 (使用者體驗優化) | Success: Login form is fully functional with validation, responsive design works on all devices, error handling provides clear user feedback, component follows existing architectural patterns_\r\n\r\n- [ ] 10. 建立 TOTP 登入驗證元件 TotpLoginComponent\r\n  - File: ngx-app/src/app/features/auth/pages/totp-login.component.ts\r\n  - 實作 TOTP 驗證碼輸入和備用驗證碼功能\r\n  - 重用現有的 TOTP 驗證邏輯和 UI 設計\r\n  - Purpose: 提供登入流程中的 TOTP 驗證介面\r\n  - _Leverage: 現有的 ngx-app/src/app/features/auth/pages/otp-verify.component.ts_\r\n  - _Requirements: Requirement 2, Requirement 3, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Angular Developer with expertise in component reuse and TOTP integration | Task: Create TotpLoginComponent for login TOTP verification and backup codes following requirements 2, 3, and 4, reusing existing otp-verify component patterns and UI design | Restrictions: Reuse existing TOTP verification logic, maintain consistent UI/UX with existing components, handle backup code switching, implement proper error states and retry logic | _Leverage: ngx-app/src/app/features/auth/pages/otp-verify.component.ts | _Requirements: Requirement 2 (TOTP 雙因子驗證), Requirement 3 (備用驗證碼支援), Requirement 4 (使用者體驗優化) | Success: TOTP verification works seamlessly in login flow, backup code functionality is available, UI is consistent with existing design, error handling guides users effectively_\r\n\r\n- [ ] 11. 建立路由守衛 AuthGuard\r\n  - File: ngx-app/src/app/shared/guards/auth.guard.ts\r\n  - 實作路由保護和自動重導向邏輯\r\n  - 整合 SessionService 檢查認證狀態\r\n  - Purpose: 保護需要認證的路由和頁面\r\n  - _Leverage: Angular Router Guards 和現有的路由結構_\r\n  - _Requirements: Requirement 5_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Angular Security Developer with expertise in route guards and navigation | Task: Create AuthGuard for route protection and automatic redirection following requirement 5, integrating with SessionService and existing routing structure | Restrictions: Use functional guards (Angular 14+ style), ensure proper redirect handling, maintain user-friendly navigation experience, handle edge cases like token expiration | _Leverage: Angular Router, ngx-app/src/app/app.routes.ts | _Requirements: Requirement 5 (安全會話管理) | Success: AuthGuard properly protects authenticated routes, redirects work smoothly, user experience is seamless, guard integrates well with SessionService and routing system_\r\n\r\n- [ ] 12. 更新路由配置支援登入流程\r\n  - File: ngx-app/src/app/app.routes.ts\r\n  - 添加登入、TOTP 登入驗證路由\r\n  - 配置路由守衛保護需要認證的頁面\r\n  - Purpose: 整合登入流程到應用程式路由系統\r\n  - _Leverage: 現有的 ngx-app/src/app/app.routes.ts 結構_\r\n  - _Requirements: Requirement 1, Requirement 2, Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Angular Routing Specialist with expertise in navigation and route configuration | Task: Update app routes to support login flow, TOTP verification, and route guards following requirements 1, 2, and 4, extending existing route structure | Restrictions: Maintain existing route patterns, ensure proper lazy loading, configure guards correctly, provide meaningful route titles and metadata | _Leverage: ngx-app/src/app/app.routes.ts | _Requirements: Requirement 1 (帳號密碼登入功能), Requirement 2 (TOTP 雙因子驗證), Requirement 4 (使用者體驗優化) | Success: All authentication routes are properly configured, lazy loading works correctly, route guards protect appropriate pages, navigation flow is intuitive and user-friendly_\r\n\r\n## 整合和測試任務\r\n\r\n- [ ] 13. 建立認證功能整合測試\r\n  - File: MOTPDualAuthWebsite.API/Tests/Integration/AuthControllerTests.cs, ngx-app/src/app/features/auth/auth.integration.spec.ts\r\n  - 測試完整的登入流程：帳號密碼 → TOTP 驗證 → 會話建立\r\n  - 測試錯誤處理和邊界情況\r\n  - Purpose: 確保前後端認證功能正確整合\r\n  - _Leverage: 現有的測試結構和工具_\r\n  - _Requirements: All Requirements_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: QA Integration Engineer with expertise in full-stack testing and authentication flows | Task: Create comprehensive integration tests for authentication functionality covering all requirements, testing complete login flow from frontend to backend including error scenarios | Restrictions: Test real API endpoints, use proper test data isolation, ensure tests are deterministic and repeatable, cover both success and failure paths | _Leverage: Existing test infrastructure and patterns | _Requirements: All Requirements (完整登入流程測試) | Success: Integration tests cover complete authentication flow, error scenarios are properly tested, tests run reliably in CI/CD pipeline, authentication functionality works end-to-end_\r\n\r\n- [ ] 14. 實作使用者體驗優化\r\n  - File: 多個前端元件檔案\r\n  - 添加載入狀態、錯誤訊息、進度指示器\r\n  - 實作無障礙功能和鍵盤導航支援\r\n  - Purpose: 提升登入流程的使用者體驗\r\n  - _Leverage: 現有的 Angular Material 元件和無障礙功能_\r\n  - _Requirements: Requirement 4_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: UX/UI Developer with expertise in accessibility and user experience optimization | Task: Enhance authentication components with loading states, error messages, progress indicators, and accessibility features following requirement 4, using existing Angular Material components | Restrictions: Follow WCAG 2.1 AA guidelines, ensure keyboard navigation works properly, provide clear visual feedback, maintain design consistency with existing components | _Leverage: Angular Material components, existing accessibility patterns | _Requirements: Requirement 4 (使用者體驗優化) | Success: All authentication flows provide excellent user experience, accessibility compliance is maintained, visual feedback is clear and helpful, keyboard navigation works throughout the flow_\r\n\r\n- [ ] 15. 安全性強化和最終測試\r\n  - File: 多個檔案的安全性相關配置\r\n  - 實作 CSRF 保護、安全標頭、Rate Limiting\r\n  - 執行安全性測試和效能測試\r\n  - Purpose: 確保認證系統符合安全性要求\r\n  - _Leverage: ASP.NET Core 安全功能和現有安全配置_\r\n  - _Requirements: Security NFR_\r\n  - _Prompt: Implement the task for spec login-authentication, first run spec-workflow-guide to get the workflow guide then implement the task: Role: Security Engineer with expertise in web application security and penetration testing | Task: Implement comprehensive security measures including CSRF protection, security headers, rate limiting, and conduct security testing following security non-functional requirements | Restrictions: Use industry-standard security practices, ensure no sensitive data exposure, implement proper audit logging, follow OWASP guidelines | _Leverage: ASP.NET Core security features, existing security configuration | _Requirements: Security NFR (安全性非功能需求) | Success: All security measures are properly implemented, security testing passes without critical vulnerabilities, rate limiting prevents brute force attacks, audit logging captures security events_ ",
  "fileStats": {
    "size": 20275,
    "lines": 142,
    "lastModified": "2025-09-25T07:51:39.917Z"
  },
  "comments": []
}