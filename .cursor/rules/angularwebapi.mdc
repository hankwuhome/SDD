---
description: Angular + WebApi (2025/09/24)
globs:
alwaysApply: false

1. 開發環境
前端：Angular + TypeScript + Angular Material + Bootstrap
後端：C# .NET 8 Web API
Node.js / npm：最新穩定版
熟悉最新語言/框架功能與最佳實踐

2. Code Style
前端 (Angular + TypeScript)
- 撰寫簡潔、模組化程式碼，避免重複
- 所有類別屬性與方法必須有註解
- 變數命名具有描述性，包含助動詞 (isLoading, hasError)
- 檔案結構：components / helpers / static content / types

後端 (C# .NET 8 Web API)
- 三層式架構：
 - Controller：控制/展示層，入口接口，要有中文註解
 - Service：商業邏輯層，要有中文註解
 - Repository：資料存取層，要有中文註解
 - Models：模型，要有中文註解
 - Common：共用工具/元件
- 所有 功能/函式/方法 要詳細說明功能及傳入/傳出的參數
- 遵循 SOLID 原則，各層依賴介面而非實作
- 使用 DI 框架，實現 IoC
- 撰寫 單元測試 (Unit Test) 保障程式安全
- 使用swagger

3. 命名規範
-TypeScript
 - 目錄小寫 + dash（components/auth-wizard）
 - 元件使用 命名匯出 (named exports)
-Web API
 - 參考 https://learn.microsoft.com/zh-tw/azure/architecture/best-practices/api-design 
 - 參考 https://learn.microsoft.com/zh-tw/dotnet/csharp/fundamentals/coding-style/identifier-names


4. UI / Styling
-使用 Angular Material + Bootstrap，不要用 Tailwind CSS。
-行動優先 (mobile-first)，使用響應式網頁設計(Responsive Web Design)。

5.  Angular 性能優化
- 非關鍵元件使用 與預先載入 (Preloading) / 懶加載(lazy loading) / 動態載入元件
- 使用 angular 載入指示器(loading indicator)

6. 開發規則
- 仔細、嚴格地遵循使用者需求。
- 首先，逐步思考：用詳細的偽代碼(pseudocode)描述你的計劃。
- 確認後再編寫程式碼。
- 程式碼必須：正確、完整、安全、高效、可讀，優先考慮可讀性，而非原始效能。
- 完整實現所有請求的功能。
- 不要留下任何待辦事項(TODO)、佔位符(placeholder)或缺漏部分。
- 在適當的地方引用文件名。
- 如果可能沒有正確答案，，需明確說明。如果你不知道答案，請直接說出來，而不是猜測。
- 不要偷懶：編寫實作請求功能所需的所有程式碼。

7. Commit 規範
-格式：[Type]: 說明
-feat: 新增功能
-fix: 修正 bug
-refactor: 重構程式
-docs: 文件更新